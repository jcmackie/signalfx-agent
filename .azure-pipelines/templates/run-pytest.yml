parameters:
  markers: 'windows or windows_only'
  options: ''
  changesInclude: ''

steps:
- bash: |
    echo '##vso[task.setvariable variable=hasChanges]true'
    [[ -z "$PATHS" || "$(Build.SourceBranchName)" = "master" || "$(Build.SourceBranch)" =~ ^refs/tags/ ]] && exit 0
    export CIRCLE_BRANCH="$(Build.SourceBranchName)"
    if [[ "$CIRCLE_BRANCH" = "merge" ]]; then
        export CIRCLE_BRANCH="$(System.PullRequest.SourceBranch)"
    fi
    git checkout $(System.PullRequest.SourceBranch)
    if ! scripts/changes-include-dir $PATHS; then
        echo "no changes for $PATHS"
        echo '##vso[task.setvariable variable=hasChanges]false'
    fi
  env:
    PATHS: ${{ parameters.changesInclude }}
- template: 'install-pytest.yml'
- powershell: |
    mkdir test_output -ea 0
    echo "Executing '$env:MARKERS' tests"
    pytest -m "$env:MARKERS" $env:OPTIONS --verbose --junitxml=test_output/test_results.xml --html=test_output/test_results.html --self-contained-html tests
    if ($lastexitcode -gt 1) { throw }
  env:
    MARKERS: ${{ parameters.markers }}
    OPTIONS: ${{ parameters.options }}
  ignoreLASTEXITCODE: true
  displayName: 'Run pytest'
  condition: or(eq(variables.hasChanges, 'true'), eq(variables.hasChanges, True))
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'test_output'
    artifactName: $(Agent.JobName)
  condition: or(eq(variables.hasChanges, 'true'), eq(variables.hasChanges, True))
- task: PublishTestResults@2
  inputs:
    searchFolder: '$(Build.SourcesDirectory)'
    testResultsFormat: 'JUnit'
    testResultsFiles: 'test_output/*.xml'
    failTaskOnFailedTests: true
  condition: or(eq(variables.hasChanges, 'true'), eq(variables.hasChanges, True))
